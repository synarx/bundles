--[[
	Name: TrueRandom
	Purpose: Generates true random numbers.
	Author: AverageLua

	---------------------------

	Usage example:
		local TrueRandom = require(game:GetService("ServerScriptService").TrueRandom)

		local RNG = TrueRandom.new(1, 100) -- Minimum and maximum values for number generation.

		print(RNG:Next()) -- Prints a number between 1 and 100.

	----------------------------

	Extra information:
		Changing the "DefaultListLength" value will change how many numbers are requested to
		be generated by the random.org API. This number doesn't matter that much, but I recommend
		keeping it at 1000. (You can also change it dynamically by setting TrueRandom.DefaultListLength and
		the following RNG objects created will use that value.)


		When you create an RNG object, you will be able to view/edit its metadata. The metadata of RNG objects
		include their cached random numbers and min/max values. Example:

			local TrueRandom = require(game:GetService("ServerScriptService").TrueRandom)

			local RNG = TrueRandom.new(1, 100) -- Minimum and maximum values for number generation.

			print(RNG._Numbers) -- Cached random numbers
			print(RNG._Min) -- Min value
			print(RNG._Max) -- Max value
]]

local HttpService = game:GetService("HttpService")
local BaseURL = "https://www.random.org/integers/?num=%s&min=%s&max=%s&col=1&base=10&format=plain&rnd=new"

local RNG = Random.new()

local trueRandom = {DefaultListLength = 1000}
trueRandom.__index = trueRandom

function trueRandom:_GetNumberList(min, max)
	local response = HttpService:RequestAsync(
		{
			Url = string.format(BaseURL, tostring(self.DefaultListLength), tostring(min), tostring(max)),
			Method = "GET",
			Headers = {
				["Content-Type"] = "application/json"
			},
		}
	)

	local rngNumbers = {}
	if response.Success then
		for _, num in pairs(string.split(response.Body, "\n")) do
			num = tonumber(num)
			if type(num) == "number" then
				table.insert(rngNumbers, num)
			end
		end
	else -- Used as a backup in case HTTP fails, better than nothing.
		warn("HTTP request failed, resorting to pseudo-random.")
		for _ = 1, self.DefaultListLength do
			table.insert(rngNumbers, RNG:NextInteger(min, max))
		end
	end
	return rngNumbers
end

function trueRandom:Next()
	if #self._Numbers < 1 then
		self._Numbers = self:_GetNumberList(self._Min, self._Max)
	end
	local nextNumber = self._Numbers[1]
	table.remove(self._Numbers, 1)
	return nextNumber
end

function trueRandom.new(min, max)
	if not min or not max then
		warn("Invalid perameters while creating random generator.")
		return
	end
	local rngObject = {}
	setmetatable(rngObject, trueRandom)

	rngObject._Numbers = trueRandom:_GetNumberList(min, max)
	rngObject._Min = min
	rngObject._Max = max

	return rngObject
end

return trueRandom